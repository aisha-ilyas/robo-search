{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","username","email","website","className","src","alt","CardList","robots","map","item","i","key","SearchBox","searchEvent","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchEvent","e","setState","searchText","target","value","state","robot","fetch","then","response","json","user","this","filterRobots","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sSAeeA,MAZf,YAAqD,IAAtCC,EAAqC,EAArCA,GAAIC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QACxC,OACE,yBAAKC,UAAU,qDACb,yBAAKC,IAAK,wBAAyBN,EAAIO,IAAI,WAC3C,4BAAKN,GACL,2BAAIC,GACJ,2BAAIC,GACJ,2BAAIC,KCaKI,MApBf,YAA+B,IAAXC,EAAU,EAAVA,OAChB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OACI,kBAAC,EAAD,CACIC,IAAK,IAAID,EACTZ,GAAIW,EAAKX,GACTC,KAAMU,EAAKV,KACXC,SAAUS,EAAKT,SACfC,MAAOQ,EAAKR,MACZC,QAASO,EAAKP,eCAvBU,MAbf,YAAqC,IAAhBC,EAAe,EAAfA,YACjB,OACI,yBAAKV,UAAU,OACX,2BACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCEXI,G,MATF,SAACC,GACV,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,oBAAqBC,OAAQ,UAClEJ,EAAMK,YCwCJC,E,kDAtCP,aAAe,IAAD,8BACV,gBAaJC,cAAgB,SAACC,GACb,EAAKC,SAAS,CAACC,WAAYF,EAAEG,OAAOC,SAbpC,EAAKC,MAAQ,CACTC,MAAO,GACPJ,WAAY,IAJN,E,gEAQO,IAAD,OAChBK,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKV,SAAS,CAACK,MAAOK,S,+BAOlC,IAAD,EACuBC,KAAKP,MAA1BC,EADF,EACEA,MAAOJ,EADT,EACSA,WACRW,EAAeP,EAAMQ,QAAO,SAAA/B,GAC9B,OAAOA,EAAKV,KAAK0C,cAAcC,SAASd,EAAWa,kBAGvD,OAAyB,IAAjBT,EAAMW,OACV,wBAAIxC,UAAU,SAAd,cAEI,yBAAKA,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,YAAayB,KAAKb,gBAC7B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUlB,OAAQgC,U,GAhC5BK,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f953c015.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nfunction Card({id, name, username, email, website}) {\n  return (\n    <div className='tc bg-light-red dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img src={'https://robohash.org/'+ id} alt='robots' />\n      <h2>{name}</h2>\n      <p>{username}</p>\n      <p>{email}</p>\n      <p>{website}</p>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nfunction CardList({ robots }) {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((item, i) => {\r\n                return (\r\n                    <Card \r\n                        key={'1'+i} \r\n                        id={item.id} \r\n                        name={item.name} \r\n                        username={item.username} \r\n                        email={item.email} \r\n                        website={item.website}/>\r\n                );\r\n                })      \r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nfunction SearchBox({ searchEvent }) {\r\n    return(\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={searchEvent}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nlet Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '2px solid #60B917', height: '500px' }} >\r\n            {props.children}\r\n        </div>\r\n\r\n    ); \r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll'\r\n\r\nclass App extends Component {\r\n        constructor() {\r\n            super();\r\n            this.state = {\r\n                robot: [],\r\n                searchText: ''\r\n            }\r\n        }\r\n\r\n        componentDidMount() {\r\n            fetch('https://jsonplaceholder.typicode.com/users')\r\n                .then(response => response.json())\r\n                .then(user => this.setState({robot: user}));\r\n        }\r\n\r\n        onSearchEvent = (e) => {\r\n            this.setState({searchText: e.target.value});\r\n        }\r\n\r\n        render() {\r\n            const {robot, searchText} = this.state;\r\n            const filterRobots = robot.filter(item => {\r\n                return item.name.toLowerCase().includes(searchText.toLowerCase());\r\n            });\r\n\r\n            return (robot.length === 0) ? \r\n                <h1 className='f1 tc'>Loading...</h1> :\r\n                (\r\n                    <div className='tc'>\r\n                        <h1 className='f2'>RoboFriends</h1>\r\n                        <SearchBox searchEvent={this.onSearchEvent} />\r\n                        <Scroll>\r\n                            <CardList robots={filterRobots} />\r\n                        </Scroll>  \r\n                    </div>\r\n                );\r\n        }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}